open_project_mode_init :: fn () {
	active_editor = command_editor;
	buf :: get_active_buffer_and_editor();
	clear_buffer(buf);

	input_mode               = InputMode.TEXT;
	notify_changes_to_buffer = buf.index;

	list_projects();
}

open_project_mode_terminate :: fn () {}

draw_open_project_mode :: fn () {
	assert(active_editor == command_editor);
	w, h :: get_command_editor_size();

	draw_command_editor(command_editor, 0.f, 0.f, w, h, "Open Project: ");

	using DrawListCols;
	list_h, clicked :: draw_list(0.f, h, w, ICON | TITLE);
	draw_last_status_message(0.f, h + list_h, w);
	if clicked { commit(); }
}

//
// Commands
//

invoke_command_open_project_mode :: fn (buf: *Buffer #maybe_unused, cmd: Command) bool {
	assert(active_editor == command_editor);
	assert(editors[active_editor].buffer_index == buf.index);

	using std;
	using Command;

	switch cmd {
		INSERT_NEW_LINE { commit(); }

		MOVE_UP   { list_item_up();   }
		MOVE_DOWN { list_item_down(); }

		default { return false; }
	}

	return true;
}

open_project_cmd_changed :: fn () {
	buf :: get_active_buffer_and_editor();
	cmd :: peek_row(buf, 0);
	if cmd.len == 0 {
		clear_list_filters();
		return;
	}

	filter_list(cmd);
}

#private

commit :: fn () {
	item :: get_selected_item_in_list();
	if !item { return; }

	set_mode(Mode.TEXT_EDIT);
	err :: open_project(tprint("%/%", data_dir, PROJECTS_DIRECTORY), tprint("%.proj", item.title));
	if err { print_err(err); }
}

