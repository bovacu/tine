//
// Process
//

IoStream :: win32.HANDLE;
Pid :: win32.DWORD;

start_process :: fn (ctx: *?TContext, cmd: string_view, args: ...string_view) Error {
	using win32;

	static_assert(has_member2(TContext, "pid"));
	static_assert(has_member2(TContext, "stdin"));
	static_assert(has_member2(TContext, "stdout"));

	stdin_read:   win32.HANDLE;
	stdin_write:  win32.HANDLE;
	stdout_read:  win32.HANDLE;
	stdout_write: win32.HANDLE;

	security_attributes :: SECURITY_ATTRIBUTES.{
		nLength = auto sizeof(SECURITY_ATTRIBUTES),
		bInheritHandle = TRUE,
		lpSecurityDescriptor = null
	};

	if CreatePipe(&stdout_read, &stdout_write, &security_attributes, 0) == 0 {
		return os_get_last_error2();
	}

	if SetHandleInformation(stdout_read, HANDLE_FLAG_INHERIT, 0) == 0 {
		return os_get_last_error2();
	}

	if CreatePipe(&stdin_read, &stdin_write, &security_attributes, 0) == 0 {
		return os_get_last_error2();
	}

	if SetHandleInformation(stdin_write, HANDLE_FLAG_INHERIT, 0) == 0 {
		return os_get_last_error2();
	}

	// Create process
	process_info: PROCESS_INFORMATION;

	startup_info :: STARTUPINFOA.{
		cb          = auto sizeof(STARTUPINFOA),
		hStdError   = stdout_write,
		hStdOutput  = stdout_write,
		hStdInput   = stdin_read,
		dwFlags     = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW,
		wShowWindow = auto SW_HIDE,
	};

	tmp := std.str_new(cmd, application_context.temporary_allocator);
	loop i := 0; i < args.len; i += 1 {
		std.str_append(&tmp, " ");
		std.str_append(&tmp, args[i]);
	}
	state :: CreateProcessA(null, std.strtoc(tmp), null, null, TRUE, 0, null, null, &startup_info, &process_info);
	if state == 0 {
		return os_get_last_error2();
	}

	CloseHandle(process_info.hProcess);
	CloseHandle(process_info.hThread);
	CloseHandle(stdout_write);
	CloseHandle(stdin_read);

	ctx.pid    = process_info.dwProcessId;
	ctx.stdin  = stdin_write;
	ctx.stdout = stdout_read;

	return OK;
}

kill_process :: fn (pid: Pid, exit_code: s32) Error {
	using win32;
	handle :: OpenProcess(PROCESS_TERMINATE, FALSE, pid);
	if !handle {
		return os_get_last_error2();
	}
	defer CloseHandle(handle);

	if TerminateProcess(handle, auto exit_code) == 0 {
		return os_get_last_error2();
	}

	return OK;
}

peek_pipe :: fn (stream: IoStream, error_on_close := false) (err: Error, available_bytes: u32, is_closed: bool) {
	using win32;

	available_bytes: u32 #noinit;
	if PeekNamedPipe(stream, null, 0, null, &available_bytes, null) == 0 {
		code, desc :: os_get_last_error();
		if error_on_close == false && code == ERROR_BROKEN_PIPE { return OK, 0, true; }
		return error(code, desc), 0, false;
	}
	return OK, available_bytes, false;
}

read_pipe :: fn (stream: IoStream, dest: *string, bytes_to_read: u32, error_on_close := false) (err: Error, is_closed: bool) {
	using win32;
	using std;

	str_reserve(dest, auto bytes_to_read);

	total_read : u32 = 0;
	loop total_read < bytes_to_read {
		buf:  [2048]u8 #noinit;
		read: DWORD;
		state :: ReadFile(stream, buf.ptr, auto buf.len, &read, null);
		if state == 0 {
			code, desc :: os_get_last_error();
			if error_on_close == false && code == ERROR_BROKEN_PIPE { return OK, true; }
			return error(code, desc), false;
		}
		if read == 0 { break; }
		str_append(dest, string_view.{ auto read, buf.ptr });
		total_read += read;
	}

	return OK, false;
}

write_pipe :: fn (stream: IoStream, msg: string_view, error_on_close := false) (err: Error, is_closed: bool) {
	using std;
	using win32;

	tmp := msg;
	loop tmp.len > 0 {
		written: DWORD;
		state :: WriteFile(stream, tmp.ptr, auto tmp.len, &written, null);
		if state == 0 {
			code, desc :: os_get_last_error();
			if error_on_close == false && code == ERROR_BROKEN_PIPE { return OK, true; }
			return error(code, desc), false;
		}
		tmp.ptr = &tmp[auto written];
		tmp.len -= cast(s32) written;
	}
	return OK, false;
}

close_stream :: fn (handle: IoStream) {
	win32.CloseHandle(handle);
}

//
// MISC
//

get_fonts_directory :: fn () string {
	path :: std.get_home();
	std.str_append(&path, "/AppData/Local/Microsoft/Windows/Fonts");
	return path;
}

new_filepath_from_url :: fn (url: string_view) (err: Error, filepath: string) {
	using win32;
	using std;

	url_dup :: tprint("%", url); // Might not be zero-terminated...
	buf: [MAX_PATH]u8 #noinit;
	len: DWORD = auto buf.len;
	status :: PathCreateFromUrlA(strtoc(url_dup), auto buf.ptr, &len, 0);
	if status != S_OK {
		return error("Url '%' cannot be converted to file path.", url), string.{};
	}
	result :: str_new(string_view.{ auto len, buf.ptr });
	str_replace_all(&result, '\\', '/');
	return OK, result;
}

new_url_from_filepath :: fn (filepath: string_view) (err: Error, url: string) {
	using win32;
	using std;

	filepath_dup :: tprint("%", filepath); // Might not be zero-terminated...
	buf: [2084]u8 #noinit; // INTERNET_MAX_URL_LENGTH
	len: DWORD = auto buf.len;
	status :: UrlCreateFromPathA(strtoc(filepath_dup), auto buf.ptr, &len, 0);
	if status != S_OK {
		return error("Filepath '%' cannot be converted to URL.", filepath), string.{};
	}
	result :: str_new(string_view.{ auto len, buf.ptr });
	return OK, result;
}

//
// File change notifications
//

Watcher :: struct {
	using win32;
	handle: HANDLE;
	path:   string;
	flags:  WatchFor;
	remove: bool;
}

watch_init :: fn () {
	using std;
	mutex_init(&worker_context.mutex);
	async(&job, &worker_context, &worker);
}

watch_terminate :: fn () {
	using std;
	worker_context.cancel = true;
	async_wait(&job);
	mutex_terminate(&worker_context.mutex);
}

WatchFor :: enum u32 #flags {
	FILE_CHANGES      = win32.FILE_NOTIFY_CHANGE_FILE_NAME;
	DIRECTORY_CHANGES = win32.FILE_NOTIFY_CHANGE_DIR_NAME;
	MODIFICATIONS     = win32.FILE_NOTIFY_CHANGE_LAST_WRITE;
}

watch_changes :: fn (directory: string_view, flags: WatchFor) Error {
	using win32;
	using std;

	hash :: hash_combine(str_hash(directory), cast(u32) flags);

	mutex_lock(&worker_context.mutex);
	defer mutex_unlock(&worker_context.mutex);

	tbl :: &worker_context.watched;
	w := tbl_lookup_ptr(tbl, hash);
	if w {
		w.remove = false;
		return OK;
	}

	handle :: FindFirstChangeNotificationA(strtoc(directory), TRUE, auto flags);
	if handle == INVALID_HANDLE || handle == null {
		return os_get_last_error2();
	}

	w = tbl_insert(tbl, hash);
	w.path   = str_new(directory);
	w.handle = handle;
	w.remove = false;
	w.flags  = flags;

	return OK;
}

unwatch_changes :: fn (directory: string_view, flags: WatchFor) {
	using win32;
	using std;

	hash :: hash_combine(str_hash(directory), cast(u32) flags);

	mutex_lock(&worker_context.mutex);
	defer mutex_unlock(&worker_context.mutex);

	tbl :: &worker_context.watched;
	w :: tbl_lookup_ptr(tbl, hash);
	if !w { return; } // Maybe report this?
	str_delete(&w.path);
	assert(w);
	w.remove= true;
}

next_watcher_event :: fn (changed_directory: *string_view, change_kind: *WatchFor) bool {
	using std;
	mutex_lock(&worker_context.mutex);
	defer mutex_unlock(&worker_context.mutex);

	changed :: &worker_context.changed;

	dt :: frame_delta_time;
	loop i := 0; i < changed.len; i += 1 {
		c :: &changed.values[i];
		c.timeout_ms -= dt;
		if c.timeout_ms < 0.f {
			@changed_directory = tprint("%", c.path);
			@change_kind       = c.flags;
			tbl_erase(changed, changed.keys[i]);
			return true;
		}
	}

	return false;
}

get_file_last_write_time :: fn (filepath: string_view) (t: u64, err: Error) {
	using win32;

	attributes: WIN32_FILE_ATTRIBUTE_DATA;
	if GetFileAttributesExA(std.strtoc(filepath), GET_FILEEX_INFO_LEVELS.GetFileExInfoStandard, auto &attributes) == TRUE {
		tmp: union {
			wt: FILETIME;
			t: u64;
		};
		tmp.wt = attributes.ftLastWriteTime;
		return tmp.t, OK;
	}

	return 0, os_get_last_error2();
}

#private

// Note that the file-watch system on Windows is SUPER SHITTY, there is no suitable way to watch changes to
// individual files, and notification system for directories might generate multiple events for a "single" user
// action e.g. save. Also even we have the save notification, the file still might be blocked by writing process,
// so we have timeout to give Windows some spare time to do its shit.

Change :: struct {
	path:       string;
	flags:      WatchFor;
	timeout_ms: f32;
}

job: std.Async(*typeof(worker_context), s32);

worker_context: struct {
	using std;

	watched: Table(u32, Watcher);
	changed: Table(string_view, Change);
	mutex: Mutex;

	cancel: bool;
}

worker :: fn (ctx: *typeof(worker_context)) s32 {
	using win32;
	using std;

	print_log("File watch started.");

	handles:   [..]HANDLE;
	hashes:    [..]u32;
	to_remove: [..]u32;
	defer array_terminate(&handles);
	defer array_terminate(&hashes);
	defer array_terminate(&to_remove);
	defer tbl_terminate(&ctx.watched);
	defer tbl_terminate(&ctx.changed);
	tbl :: &ctx.watched;

	loop !ctx.cancel {
		{
			mutex_lock(&worker_context.mutex);
			defer mutex_unlock(&worker_context.mutex);

			handles.len   = 0;
			hashes.len    = 0;
			to_remove.len = 0;
			loop i := 0; i < tbl.len; i += 1 {
				w :: &tbl.values[i];
				if w.remove {
					FindCloseChangeNotification(w.handle);
					str_delete(&w.path);
					array_push(&to_remove, tbl.keys[i]);
					continue;
				}

				array_push(&handles, w.handle);
				array_push(&hashes,  tbl.keys[i]);
			}
			loop i := 0; i < to_remove.len; i += 1 {
				tbl_erase(tbl, to_remove[i]);
			}
			assert(handles.len == hashes.len);
		}

		if handles.len == 0 {
			if !ctx.cancel { os_sleep_ms(100); }
			continue;
		}
		status :: WaitForMultipleObjects(auto handles.len, handles.ptr, FALSE, 100);
		if status == WAIT_TIMEOUT { continue; }

		{
			mutex_lock(&worker_context.mutex);
			defer mutex_unlock(&worker_context.mutex);

			if status >= 0 && status < auto hashes.len {
				index :: cast(s64) status;
				hash  :: hashes[index];
				w :: tbl_lookup_ptr(tbl, hash);
				assert(w);
				assert(w.handle == handles[index]);

				c := tbl_lookup_ptr(&ctx.changed, w.path);
				if !c {
					c = tbl_insert(&ctx.changed, w.path);
					c.path  = w.path;
					c.flags = auto 0;
				}
				c.flags |= w.flags;
				c.timeout_ms = 200.f;

				if FindNextChangeNotification(w.handle) == FALSE {
					print_err(os_get_last_error2());
					w.remove = true;
				}
			}
		}
		temporary_reset(); // just in case...
	}

	return 0;
}
