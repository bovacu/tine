search_mode_init :: fn () {
	active_editor = command_editor;
	buf, editor :: get_active_buffer_and_editor();
	clear_buffer(buf);

	input_mode               = InputMode.TEXT;
	notify_changes_to_buffer = buf.index;
	search.result_index      = 0;

	target_buf, target_editor :: get_last_active_buffer_and_editor();
	start_position = get_cursor_position(target_buf, target_editor.cursor_index);
	start_top      = target_editor.top;

	initial_subject := peek_selection(target_buf, target_editor.cursor_index);
	clear_selection(target_buf, target_editor.cursor_index);

	if initial_subject.len > 0 && is_multiline(initial_subject) == false {
		search.last_subject.len = 0;
		std.str_append(&search.last_subject, initial_subject);
	} else {
		initial_subject = search.last_subject;
	}

	if initial_subject.len > 0 {
		insert_string(buf, 0, initial_subject);
		select_all(editor, buf);
	}

	search.results.len = 0;
	search_cmd_changed();

	if settings.show_hints {
		replace_binding          :: get_keybinding_for_command(Command.SEARCH_REPLACE);
		result_to_buffer_binding :: get_keybinding_for_command(Command.SEARCH_TO_BUFFER);
		next_binding             :: get_keybinding_for_command(Command.MOVE_DOWN);
		prev_binding             :: get_keybinding_for_command(Command.MOVE_UP);
		hint :: tprint("[%] next match\t[%] prev match\t[%] replace\t[%] show results in buffer", next_binding, prev_binding, replace_binding, result_to_buffer_binding);
		print_info(hint);
	}
}

search_mode_terminate :: fn () {}

draw_search_mode :: fn () {
	assert(active_editor == command_editor);
	w, h :: get_command_editor_size();

	target_buf :: get_last_active_buffer_and_editor();

	hint: string_view;
	if search.results.len > 0 {
		hint = tprint("[%/%]", search.result_index+1, search.results.len);
	}

	draw_command_editor(command_editor, 0.f, 0.f, w, h, tprint("Search in '%': ", target_buf.name), hint);
	draw_last_status_message(0.f, h, w);
}

//
// Commands
//

invoke_command_search_mode :: fn (buf: *Buffer #maybe_unused, cmd: Command) bool {
	assert(active_editor == command_editor);
	assert(editors[active_editor].buffer_index == buf.index);

	using std;
	using Command;
	switch cmd {
		MOVE_UP   { prev_match(); }

		SEARCH_FILE,
		MOVE_DOWN { next_match(); }

		SEARCH_TO_BUFFER,
		INSERT_NEW_LINE {
			// Lets store the current search subject for later reuse.
			subject :: commit_current_subject();

			target_buf :: get_last_active_buffer_and_editor();

			if cmd == SEARCH_TO_BUFFER {
				if target_buf.index == search_buffer_index {
					print_warn("Search results buffer is already open.");
				} else {
					tmp := str_new(1024, application_context.temporary_allocator);
					loop i := 0; i < search.results.len; i += 1 {
						hit :: &search.results[i];
						filepath := target_buf.filepath;
						if filepath.len == 0 {
							filepath = target_buf.name;
						}
						line_sample :: expand_position_to_whole_line(target_buf.bytes, hit.start);

						// Tab is required for location parsing here!!!
						str_append(&tmp, tprint("%:%:%\t%\n", filepath, hit.row+1, hit.col+1, line_sample));
					}
					if search.results.len == 0 {
						str_append(&tmp, tprint("No match for subject '%'", subject));
					}

					set_mode(Mode.TEXT_EDIT);

					print_log("Open results in the buffer!");
					results_editor_index :: find_or_create_editor_with_buffer_in_other_split(&search_buffer_index, "search");
					results_buf    :: &buffers[search_buffer_index];
					results_editor :: &editors[results_editor_index];

					clear_buffer(results_buf);
					append_readonly_buffer(results_buf, tmp);
					set_cursor_position(results_buf, results_editor.cursor_index, 0);
				}
			} else {
				set_mode(Mode.TEXT_EDIT);
			}
		}

		SEARCH_REPLACE {
			target_buf :: get_last_active_buffer_and_editor();
			if (target_buf.flags & BufferFlags.READONLY) == BufferFlags.READONLY {
				print_warn("Buffer '%' is readonly.", target_buf.name);
				return false;
			}
			// Replace uses last seached subject as string to be replaced.
			subject :: commit_current_subject();
			if subject.len == 0 {
				print_warn("No subject to replace.");
				return false;
			}
			if search.results.len == 0 {
				print_warn("No match to be replaced!");
				return false;
			}
			set_mode(Mode.REPLACE);
		}

		CANCEL_MODE {
			target_buf, target_editor :: get_last_active_buffer_and_editor();
			// reset buffer to the starting position
			set_cursor_position(target_buf, target_editor.cursor_index, start_position);
			// Restore also top position in the editor to prevent annoying jumps.
			target_editor.top = start_top;
			return false;
		}

		default { return false; }
	}

	return true;
}

search_cmd_changed :: fn () {
	buf :: get_active_buffer_and_editor();
	target_buf, target_editor :: get_last_active_buffer_and_editor();
	subject :: peek_row(buf, 0);

	print_log("Search for: %", subject);

	search.results.len  = 0;
	search.result_index = 0;

	// reset buffer to the starting position
	set_cursor_position(target_buf, target_editor.cursor_index, start_position);

	if subject.len == 0 { return; }

	first_hit_set := false;
	start_index : s64 = 0;
	row, col: s32;

	subject_cols :: count_unicode_characters(subject);

	loop {
		hit_position :: find_matching_subject_in_data(target_buf.bytes, subject, start_index, &row, &col);
		if hit_position == -1 { break; }
		if first_hit_set == false && hit_position >= start_position {
			first_hit_set = true;
			search.result_index = search.results.len;
		}
		hit :: SearchLocation.{
			start = auto hit_position,
			end   = auto hit_position + subject.len,
			row   = row,
			col   = col
		};
		array_push(&search.results, hit);

		start_index = hit_position + subject.len;
		col += subject_cols;
	}

	if search.results.len > 0 {
		assert(search.result_index >= 0 && search.result_index < search.results.len);
		set_cursor_position(target_buf, target_editor.cursor_index, search.results[search.result_index].start);
		center_view(target_editor);
	} else {
		print_warn("No match!");
	}
}

// Jump to the next matching search location in the last search.
next_match :: fn () {
	if search.results.len == 0 {
		print_warn("No match!");
		return;
	}
	if search.results.len == 1 {
		print_warn("No other match!");
		return;
	}
	search.result_index += 1;
	if search.result_index >= search.results.len { search.result_index = 0; }

	focus_current_search_result();
}

// Jump to the prev matching search location in the last search.
prev_match :: fn () {
	if search.results.len == 0 {
		print_warn("No match!");
		return;
	}
	if search.results.len == 1 {
		print_warn("No other match!");
		return;
	}
	search.result_index -= 1;
	if search.result_index < 0 { search.result_index = search.results.len - 1; }

	focus_current_search_result();
}

focus_current_search_result :: fn () bool {
	if search.result_index < 0 || search.result_index >= search.results.len {
		return false;
	}
	target_buf, target_editor :: get_last_active_buffer_and_editor();
	set_cursor_position(target_buf, target_editor.cursor_index, search.results[search.result_index].start);
	center_view(target_editor);
	return true;
}

#private

start_position:      s64;
start_top:           s32; // Editor top position, used to restore original view to prevent jumping.

// Store current subject into global cache as a last one we performed search for. And return cached
// string.
commit_current_subject :: fn () string_view #inline {
	buf :: get_active_buffer_and_editor();
	subject :: peek_row(buf, 0);
	if subject.len == 0 { return ""; }
	search.last_subject.len = 0;
	std.str_append(&search.last_subject, subject);

	return search.last_subject;
}
